webpackHotUpdate("background",{

/***/ "./src/js/background.js":
/*!******************************!*\
  !*** ./src/js/background.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* global chrome*/\r\nlet video_url;//create to change the url of video snippet by ZZL\r\nlet behaviorTypes = [\"copy\", \"highlight\", \"video_snippet\", \"stay\", \"screenshot\"];\r\n//The characters that have associated meanings in xml of suggestions that\r\n//need to be replaced. The replacement characters are contained as values\r\n//to the keys.\r\nlet xmlChars = {\"&\": \"&amp;\"};\r\n\r\n__webpack_require__(/*! downloadjs */ \"./node_modules/downloadjs/download.js\");\r\n\r\nfunction isValidUrl(text) {\r\n    const valid = /((https?):\\/\\/)?(([w|W]{3}\\.)+)?[a-zA-Z0-9\\-\\.]{3,}\\.[a-zA-Z]{2,}(\\.[a-zA-Z]{2,})?/;\r\n    return valid.test(text);\r\n}\r\n\r\n\r\nfunction getRootUrl(rUrl){\r\n    if(rUrl.includes(\"&feature=youtu.be&t=\")){\r\n        rUrl=rUrl.split(\"&feature=youtu.be&t=\")[0];\r\n    }\r\n\r\n    if(rUrl.includes(\"#\")){\r\n        rUrl=rUrl.split(\"#\")[0];\r\n    }\r\n    return rUrl;\r\n}\r\n/**\r\n * A list of suggestions with common fields \"url\", \"title\", and \"query\". Each\r\n * suggestion corresponds to one past behavior of the user that is prompted by\r\n * the present text input given by the user in the omnibox.\r\n *\r\n * The matching mechanism is defined in the js/background.behaviorMatchesInput\r\n * method, which offers specific matching other than that of title and past\r\n * queries.\r\n *\r\n * Once a behavior matches the current input, js/background.storeSuggestionSnippet\r\n * function will be invoked to properly store this suggestion. A prototype holder\r\n * that contains the basic entries--url, title, query--will be passed in as a\r\n * parameter in case this information is necessary for specific storage. The storage\r\n * of this particular suggestion-behavior must also fill the \"content\" field of\r\n * the snippet. The processing is done by the modification of the passed in\r\n * prototype snippet, as aforementioned.\r\n *\r\n * Succeeding this, the suggestion snippet, the holder of the relevant information\r\n * of the past behavior to be prompted as a suggestion in the omnibox is stored\r\n * in this container, which will modified each time the input changes.\r\n *\r\n * As the selection of any suggestion, or in general the ascertainment of an\r\n * input in the omnibox must supercede some change in input, which triggers the\r\n * proper processing and population of this holder, all the behaviors that can\r\n * elicit a special direction, i.e. to a specific site, is properly stored in\r\n * this holder before js/background.acceptInput is invoked, which checks if\r\n * the input matches any suggestion in this container.\r\n */\r\nlet suggestionHolder;\r\nchrome.omnibox.onInputChanged.addListener(omniboxHandler);\r\nchrome.omnibox.onInputEntered.addListener(acceptInput);\r\nchrome.runtime.onMessage.addListener(handleMessage);\r\nchrome.runtime.onInstalled.addListener(function () {\r\n    chrome.storage.local.clear(function () {\r\n        const error = chrome.runtime.lastError;\r\n        if (error) {\r\n            console.error(error);\r\n        }\r\n    });\r\n});\r\n\r\n\r\n// When a tab just got created.\r\nchrome.tabs.onCreated.addListener(function(tab){\r\n    let toSave = {};\r\n    toSave[tab.id.toString()] = [];\r\n    console.log(\"initializing .. for tab \" + tab.id.toString());\r\n    chrome.storage.local.set(toSave);\r\n});\r\n\r\n/**\r\n * When there is a changed url for some tab,\r\n * 1) fetch the the original query words for the url, assuming the url is redirected\r\n * from a previous search result page in the same tab\r\n * 2) save the url visit record - if no visit in the past, create a entry, if there is, update the visit time\r\n * 3) save the query to the record.\r\n * 4ï¼‰let the content script know this url change, to update UI (draw markers, highlight texts, scroll, etc.)\r\n * 5) save this url history to tab.\r\n */\r\nchrome.tabs.onUpdated.addListener(function(tabId, changeInfo, tab) {\r\n    let tabUrl = getRootUrl(tab.url);\r\n    if (changeInfo.status === \"complete\" && isValidUrl(tabUrl)){\r\n        console.log(\"new url detected:\" + tabUrl +\" for tab \" + tabId);\r\n        let query = null;\r\n        //Look up url history for the current tab.\r\n        chrome.storage.local.get({[tabId.toString()]:[]}, function (item) {\r\n            let pastUrls = item[tabId.toString()];\r\n            // Fetch query from the url history of the current tab\r\n            if (pastUrls.length !== 0)\r\n            {\r\n                let i = pastUrls.length;\r\n                //Try get the most recent query.\r\n                while(--i>=0)\r\n                {\r\n                    try\r\n                    {\r\n                        //Attempt to extract query.\r\n                        query = extractQueryFromUrl(pastUrls[i]);\r\n                    }\r\n                    catch(exc)\r\n                    {\r\n                        //Skip.\r\n                        continue;\r\n                    }\r\n                    //Query extracted must be a string.\r\n                    if(query !== null && typeof query === \"string\")\r\n                        break;\r\n                }\r\n            }\r\n            //Update the current url to the url's behavior item map, if there isn't\r\n            //one yet, create it.\r\n            chrome.storage.local.get(tabUrl, function (urlEntry) {\r\n                //If this url has not been previously stored.\r\n                //merge the behavior of video and stay\r\n                if(!urlEntry[tabUrl])\r\n                {\r\n\r\n                    console.log(\"Url of this tab has not been previously stored!\", urlEntry);\r\n                    saveUrlInfo(tabUrl, {visit:[{visitTime: new Date(), query: query}],\r\n                        title: tab.title})\r\n                }\r\n                else\r\n                {\r\n                    console.log(\"Url previously visited!\", urlEntry);\r\n                    //The previous behavioral information garnered.\r\n                    let behavior = urlEntry[tabUrl];\r\n                    console.log(\"Behavior \", behavior);\r\n                    let videoSnippet={};\r\n                    let rightPosition=null;\r\n                    if (behavior) {\r\n                        if (behavior[\"video_snippet\"]) {\r\n                            videoSnippet = getMostValuableVideo(behavior[\"video_snippet\"]);\r\n                            console.log(videoSnippet);\r\n                        }\r\n                        if (behavior[\"stay\"]) {\r\n                            rightPosition = selectMostValuableStay(behavior[\"stay\"]);\r\n                            console.log(rightPosition);\r\n                        }\r\n                    }\r\n                    chrome.tabs.sendMessage(tabId, {\r\n                        url: tabUrl,\r\n                        \"type\":\"new_url\",\r\n                        \"video\": videoSnippet,\r\n                        \"position\": rightPosition\r\n                    }, function (response) {});\r\n                    //Add the current time and associated query to this url.\r\n                    let visits = behavior[\"visit\"];\r\n                    visits.push({visitTime: new Date(), query: query});\r\n                    saveUrlInfo(tabUrl, behavior)\r\n                }\r\n            });\r\n            //chrome.tabs.sendMessage(tabId, {url: tab.url}, function(response) {});\r\n            pastUrls.push(tabUrl);\r\n            saveUrlsToTab(pastUrls, tabId);\r\n        });\r\n    }\r\n});\r\n\r\n/**\r\n * Compare if two objects have identical fields and identical corresponding values.\r\n * The field \"time\" is not compared.\r\n * At present, comparing two behaviors is restricted to their actual information,\r\n * so if the difference is only in event_type, like \"copy\" and \"highlight\", while\r\n * their content object is the same, the result of comparison will be true.\r\n * @param obj1\r\n * @param obj2\r\n * @returns {boolean}\r\n */\r\nfunction compare(obj1, obj2)\r\n{\r\n    //Fields of both objects\r\n    let keys1 = Object.keys(obj1);\r\n    let keys2 = Object.keys(obj2);\r\n    //Sort the arrays for comparison.\r\n    keys1.sort();\r\n    keys2.sort();\r\n    console.log(\"keys \", keys1, keys2);\r\n    //If the two objects no not even have the same number of keys.\r\n    if(keys1.length !== keys2.length)\r\n        return false;\r\n    //Compare per field; spare the \"time\" field.\r\n    for(let index in keys1)\r\n    {\r\n        console.log(keys1[index], keys2[index], obj1[keys1[index], obj2[keys2[index]]]);\r\n        //If the field name is not identical.\r\n        if(keys1[index] !== keys2[index])\r\n            return false;\r\n        //If the value is not. Spare \"time\".\r\n        else if(keys1[index] !== \"time\" && obj1[keys1[index]] !== obj2[keys1[index]])\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * Extract query given a url\r\n * TODO: support more url pattern to extract queries\r\n * @param url\r\n * @returns {*} the extracted query\r\n */\r\nfunction extractQueryFromUrl(url){\r\n    if (url.includes(\"google.com\")) {\r\n        const regex = /(?<=q=).*?(?=&)/s;\r\n        if (url.match(regex) !== null) {\r\n            return url.match(regex)[0].replace(/\\+/g, ' ');\r\n        }\r\n    }\r\n    if(url.includes(\".amazon.com\")){\r\n        const regex = /(?<=k=).*?(?=&)/s;\r\n        if (url.match(regex) !== null) {\r\n            return url.match(regex)[0].replace(/\\+/g, ' ');\r\n        }\r\n    }\r\n    if(url.includes(\".yelp.com\")){\r\n        const regex = /(?<=find_desc=).*?(?=&)/s;\r\n        if (url.match(regex) !== null) {\r\n            return url.match(regex)[0].replace(/\\+/g, ' ');\r\n        }\r\n    }\r\n    if(url.includes(\".linkedin.com\")){\r\n        const regex = /(?<=keywords=).*?(?=&)/s;\r\n        if (url.match(regex) !== null) {\r\n            return url.match(regex)[0].replace(/\\+/g, ' ');\r\n        }\r\n    }\r\n    if(url.includes(\".youtube.com\")){\r\n        const regex = /search_query=(.*)/;\r\n        if (url.match(regex)[1]!== null) {\r\n            return url.match(regex)[1];\r\n        }\r\n    }\r\n    if(url.includes(\".github.com\"||false||false||false)){\r\n        const regex = /q=(.*)/;\r\n        if (url.match(regex)[1]!== null) {\r\n            return url.match(regex)[1];\r\n        }\r\n    }\r\n    if(url.includes(\".wikipedia.org\")){\r\n        const regex = /wiki\\/(.*)/;\r\n        if (url.match(regex)[1]!== null) {\r\n            return url.match(regex)[1];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Initializes or modifies the namespace for an url of its corresponding visit\r\n * information, which is an array of objects with keys \"visitTime\", and \"query\";\r\n * the latter may be null. This method is invoked when a tab is newly loaded.\r\n * The info parameter must be the entire map of behavioral information associated\r\n * with this url.\r\n * @param url The url whose corresponding behavioral information is to be modified.\r\n * @param info The entire map of behavioral information associated.\r\n */\r\nfunction saveUrlInfo(url, info)\r\n{\r\n    chrome.storage.local.set({[url]: info});\r\n}\r\n\r\n/**\r\n * Save a list of url as history for a tab\r\n * TODO: derek - add visit time information for each url.\r\n * @param urls\r\n * @param tabId\r\n */\r\nfunction saveUrlsToTab(urls, tabId){\r\n    console.log(\"save urls to tab \"+ tabId);\r\n    let toSave = {};\r\n    toSave[tabId.toString()] =  urls;\r\n    chrome.storage.local.set(toSave);\r\n}\r\n\r\n/**\r\n *\r\n * @param str\r\n * @param coords\r\n * @param callback\r\n */\r\nfunction cropData(str, coords, callback) {\r\n    let img = new Image();\r\n\r\n    img.onload = function() {\r\n        let canvas = document.createElement('canvas');\r\n        canvas.width = coords.w;\r\n        canvas.height = coords.h;\r\n\r\n        canvas.getContext('2d').drawImage(img, coords.x*window.devicePixelRatio, coords.y*window.devicePixelRatio, coords.w*window.devicePixelRatio, coords.h*window.devicePixelRatio, 0, 0, coords.w, coords.h);\r\n\r\n        callback({dataUri: canvas.toDataURL()});\r\n    };\r\n\r\n    img.src = str;\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param _screenshotObj\r\n */\r\nfunction capture(_screenshotObj) {\r\n    chrome.tabs.captureVisibleTab(null, {format: \"png\"}, function(data) {\r\n\r\n        cropData(data, _screenshotObj.coordinates, function(data) {\r\n            download(data.dataUri, _screenshotObj.filename, \"image/plain\");\r\n        });\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * Update, or add, a behavior item on the given web page. Each url corresponds with\r\n * a map that contains different behavior codes as keys and an array that contains\r\n * all behavioral information of this type of behavior. For certain information, as\r\n * title, which does not really account for a behavior that can occur more than once,\r\n * their corresponding value may be a single value.\r\n * @param url The url associated with this information.\r\n * @param behaviorType The type of behavior, as delineated in the behavior code container.\r\n * @param behavior The actual bundle of behavioral information to be stored.\r\n */\r\nfunction update(url, behaviorType, behavior)\r\n{\r\n    //If no previous storage of behavior exists under this url, result would be {}.\r\n    chrome.storage.local.get(url, function (result)\r\n    {\r\n        // If there are no existing behaviors stored yet to this url,\r\n        // provide a container.\r\n        let existingBehaviors;\r\n        if(!result[url])\r\n            existingBehaviors = {};\r\n        else\r\n            existingBehaviors = result[url];\r\n        //All previous behaviors of this category.\r\n        let bhvs;\r\n        //Whether the current behavior is a duplicate in content of one recorded\r\n        //before.\r\n        let isDuplicate = false;\r\n        // Append the new behavior to the end of the list of this type of behavior\r\n        if(!result[url] || !existingBehaviors[behaviorType])\r\n            existingBehaviors[behaviorType] = [];\r\n        else\r\n        {\r\n            bhvs = existingBehaviors[behaviorType];\r\n            //Check if a duplicate behavior of a different access time is encountered.\r\n            for(let index in bhvs)\r\n            {\r\n                if(compare(bhvs[index], behavior))\r\n                {\r\n                    if(isDuplicate)\r\n                        bhvs[index].time.push(behavior.time[0]);\r\n                    isDuplicate = true;\r\n                }\r\n            }\r\n        }\r\n        bhvs = existingBehaviors[behaviorType];\r\n        if(!isDuplicate)\r\n        //Append this behavior as new behavior if none with the same content\r\n        //is found.\r\n            bhvs.push(behavior);\r\n        //The url-associated behavior record.\r\n        let toSave = {};\r\n        toSave[url] = existingBehaviors;\r\n        console.log(existingBehaviors);\r\n        console.log(\"Behavior Stored \", toSave);\r\n        chrome.storage.local.set(toSave);\r\n    });\r\n}\r\n\r\n/**\r\n * Selecting a most probable stay users would like to revisit\r\n * TODO: @ZZL - Consider stay frequency\r\n * @param array\r\n * @returns {*}\r\n */\r\n//update consider stay frequency\r\nfunction selectMaxPosition(array){\r\n    let maxPosition=0;\r\n    for (let i = 0; i <= array.length - 1; i++) {\r\n        if (array[i].position > maxPosition) {\r\n            maxPosition = array[i].position;\r\n        }\r\n    }\r\n    return maxPosition;\r\n}\r\n//Window maximization about 1000 a page,divide by 500 a part\r\nfunction selectMostValuableStay(array) {\r\n    let sumDuration = [];\r\n    let stayPosition=[];\r\n    let scrollTo;\r\n    let maxDuration=0;\r\n    let k = Math.ceil(selectMaxPosition(array)/ 500);\r\n    for (k; k >=0; k--) {\r\n        sumDuration[k]=0;\r\n        stayPosition[k]=0;\r\n        for (let i = 0; i <= array.length - 1; i++) {\r\n            if (array[i].position > 500 * (k - 1) && array[i].position <= 500 * k) {\r\n                sumDuration[k] = sumDuration[k] + array[i].duration;\r\n                stayPosition[k] = (array[i].position + stayPosition[k]) / 2\r\n            }\r\n        }\r\n    }\r\n    for(let j=0;j<=Math.ceil(selectMaxPosition(array)/ 500);j++){\r\n        if(sumDuration[j]>maxDuration){\r\n            scrollTo=stayPosition[j];\r\n            maxDuration=sumDuration[j];\r\n        }\r\n    }\r\n    return scrollTo;\r\n}\r\n//update above\r\n\r\n\r\nfunction getMostValuableVideo(array) {\r\n    let longestTime=0;\r\n    let valuableSnippet;\r\n    for (let i = 0; i <= array.length - 1; i++) {\r\n        let snippet=array[i].end_time-array[i].start_time;\r\n        if(snippet>longestTime){\r\n            valuableSnippet=array[i];\r\n            longestTime=snippet;\r\n        }\r\n    }\r\n    return valuableSnippet;\r\n}\r\n//get most valuable video snippet's url and value gives to video_url\r\nfunction valuableVideoUrl(vUrl, videoSnippets)\r\n{\r\n    if(!videoSnippets)\r\n    {\r\n        console.log(\"No Video Snippets at this Url: Wrong Passing!\");\r\n        return;\r\n    }\r\n    let videoSnippet = getMostValuableVideo(videoSnippets);\r\n    let uString = '&feature=youtu.be&t=' +Math.floor(videoSnippet.start_time);\r\n    return vUrl.concat(uString);\r\n}\r\n\r\n\r\n\r\n/**\r\n * Handling messages from content script.\r\n * @param request\r\n * @param sender\r\n * @param sendResponse\r\n * @returns {boolean}\r\n */\r\nfunction handleMessage(request, sender, sendResponse)\r\n{\r\n    //Sift the event type from the allowed list of behaviors.\r\n    let etype;\r\n    //Keys for the message, one of them being a behavior type.\r\n    let keys = Object.keys(request);\r\n    for(let index in keys)\r\n        if(behaviorTypes.includes(keys[index])){\r\n            etype = keys[index];\r\n            if (keys[index] === \"screenshot\")\r\n                capture(request.screenshot);\r\n        }\r\n\r\n    //Invalid message if no event type is given.\r\n    if(!etype) {\r\n        console.error(\"No Event Types Given! \", request);\r\n        return false;\r\n    }\r\n\r\n    if (behaviorTypes.includes(etype)) {\r\n        update(request.url, etype, request[etype]);\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\n\r\n/**\r\n *\r\n * @param type\r\n * @param bhv\r\n * @param omniboxInput\r\n * @returns {String} The specific type of behavior the input matches.\r\n */\r\nfunction behaviorMatchesInput(type, bhv, omniboxInput) {\r\n    if(type === \"copy\")\r\n    {\r\n        //If a code segment is encountered.\r\n        if(bhv.is_code)\r\n            if(bhv.text.indexOf(omniboxInput) !== -1)\r\n                return \"code\";\r\n    }\r\n    if (bhv.title.toString().toLowerCase().includes(omniboxInput.toString().toLowerCase())){\r\n        // @Derek: I merge the title matching here to simplify the code. For default value, the\r\n        // subsequent html suggestion shouldn't do anything special, would be great to load the original site logo.\r\n        return \"default\";\r\n    }\r\n}\r\n\r\n\r\n//The snippet that contains the site-general information is passed in as\r\n//the third parameter, which is modified by this method.\r\nfunction storeSuggestionSnippet(bhvType, bhv, snippet)\r\n{\r\n    //The portable data carrier for omnibox suggestion to be returned.\r\n    let suggestBehavior = snippet;\r\n    if(bhvType === \"copy\") {\r\n        if(bhv.is_code) {\r\n            //Store the behavior-specific fields.\r\n            suggestBehavior[\"content\"] = bhv.text;\r\n            suggestBehavior[\"type\"] = \"code\";\r\n        }\r\n    }\r\n    else if(bhvType === \"video_snippet\") {\r\n        suggestBehavior[\"content\"] = suggestBehavior[\"title\"];\r\n        suggestBehavior[\"type\"] = \"video_snippet\";\r\n        suggestBehavior[\"url\"] = bhv;\r\n    }\r\n    //Add common quantities as section_id to the suggestion carrier.\r\n    //These are confined to those contained in the behavior itself, not the url,\r\n    //title, or query, which must be appended in background.omniboxHandler.\r\n    suggestBehavior[\"section_id\"] = bhv.section_id;\r\n}\r\n\r\nfunction makeSuggestionHTML(suggest)\r\n{\r\n    console.log(\"Suggestion Holder\", suggestionHolder);\r\n\r\n    let suggestions = [];\r\n    for(let i=0; i<suggestionHolder.length; i++) {\r\n\r\n        let suggestion = suggestionHolder[i];\r\n        let formattedSuggestion;\r\n        if(suggestion.type === \"code\")\r\n            formattedSuggestion = {\r\n                content: suggestion.content,\r\n                description: (suggestion.query.length===0?\"\":\r\n                    suggestion.query.toString() + \": \") + suggestion.content\r\n            };\r\n        else if(suggestion.type === \"video_snippet\")\r\n            formattedSuggestion =\r\n                {\r\n                    content: suggestion.content,\r\n                    description: (suggestion.query.length===0?\"\":\r\n                        suggestion.query.toString() + \": \") + suggestion.content\r\n                };\r\n\r\n        //Check if xml specific strings are encountered in the description.\r\n        for(let xmlChar in xmlChars)\r\n            if(formattedSuggestion.description.indexOf(xmlChar) !== -1)\r\n                formattedSuggestion.description =\r\n                    formattedSuggestion.description.split(xmlChar).join(xmlChars[xmlChar]);\r\n\r\n        suggestions.push(formattedSuggestion);\r\n    }\r\n    suggest(suggestions);\r\n}\r\n\r\n/**\r\n * Handling text inputs from the omnibox and generate suggestions\r\n *\r\n * For those types of behaviors that have no detailed content for matching, other\r\n * than the general title and the past queries of the site, their checking part\r\n * may be foregone in the background.behaviorMatchesInput method, but should\r\n * instead be recorded in the background.storeSuggestionSnippet method.\r\n * @param omniboxText The current text typed by the user in the omnibox.\r\n * @param suggest A function for populating suggestions.\r\n */\r\n\r\nfunction omniboxHandler(omniboxText, suggest)\r\n{\r\n    chrome.storage.local.get(null,\r\n        //All the behaviors organized by their urls as keys.\r\n        function (bhvItems) {\r\n            //A holder for any kind of previous behavior that may prompt a useful\r\n            //suggestion.\r\n            suggestionHolder = [];\r\n            //Loop through each url and examine if any of its behaviors matches the\r\n            //input given presently in the omnibox by the user.\r\n            for (let url in bhvItems) {\r\n                console.log(\"hey:\" + url);\r\n                //Behaviors contained under this url. All behaviors wished to be\r\n                //processed to prompt a suggestion individually should be\r\n                //included in this container.\r\n                let bhvs = {};\r\n                let bhvItm = bhvItems[url];\r\n                //The previously copied information from this page.\r\n                if (bhvItm.copy)\r\n                    bhvs[\"copy\"] = bhvItm.copy;\r\n\r\n                if(bhvItm.video_snippet) {\r\n                    console.log(\"video snippet\");\r\n                    console.log(valuableVideoUrl(url, bhvItm.video_snippet));\r\n                    //Select the video snippet to direct unto.\r\n                    bhvs[\"video_snippet\"] = ({url: valuableVideoUrl(url, bhvItm.video_snippet)});\r\n                }\r\n\r\n                //Extract the queries and title that may be used for matching.\r\n                //A list of associated query for this code snippet. The queries\r\n                //in this array must match the current omnibox input.\r\n                let queries = [];\r\n                //Check if this url, and hence this behavior, is\r\n                //associated with a query.\r\n                for (let idx in bhvItm.visit) {\r\n                    let visit = bhvItm.visit[idx];\r\n                    if (visit[\"query\"] !== null && query.toString().toLowerCase().includes(omniboxText.toString().toLowerCase()))\r\n                        queries.push(visit[\"query\"]);\r\n                }\r\n\r\n\r\n                for (let each_type in bhvs) {\r\n                    let behaviors = bhvs[each_type];\r\n                    //Determine for each behavior of this type if it matches\r\n                    //the current input given by the user.\r\n                    for (let bhvIndex in behaviors) {\r\n                        let bhv = behaviors[bhvIndex];\r\n                        //The specific type of behavior the input triggers. This\r\n                        //may modify the behavior type stored to one more specific,\r\n                        //like copy to code.\r\n\r\n                        if(behaviorMatchesInput(each_type, bhv, omniboxText)\r\n                            || queries.length !== 0) {\r\n                            console.log(\"Ready to Store!\");\r\n\r\n                            let snippet = {\r\n                                \"title\": bhvItm.title,\r\n                                \"url\": url,\r\n                                \"query\": queries\r\n                            };\r\n\r\n                            //Store this behavior accordingly. First specifically,\r\n                            //then add the common attributes.\r\n                            storeSuggestionSnippet(each_type, bhv, snippet);\r\n\r\n                            //Add this snippet for suggestion.\r\n                            suggestionHolder.push(snippet);\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n            makeSuggestionHTML(suggest);\r\n        });\r\n}\r\n\r\n/**\r\n *\r\n * @param text\r\n * @param disposition\r\n */\r\nfunction acceptInput(text, disposition) {\r\n    // disposition: \"currentTab\", \"newForegroundTab\", or \"newBackgroundTab\"\r\n    //If previously extracted code segments match the current text, direct to them.\r\n    if (!isValidUrl(text) && !suggestionHolder) {\r\n        return;\r\n    }\r\n    switch (disposition) {\r\n        case \"currentTab\": {\r\n            //Default link using text.\r\n            let link = text;\r\n\r\n            for(let index in suggestionHolder)\r\n            {\r\n                //Snippet of title-bundled copied behavior.\r\n                let snippet = suggestionHolder[index];\r\n                console.log(snippet);\r\n                if(snippet.content.trim() === text)\r\n                {\r\n                    link = snippet.url;\r\n                    link = snippet.url.concat(snippet.section_id?\r\n                        (\"#\"+snippet.section_id):\"\");\r\n                    console.log(\"link \", link);\r\n                    break;\r\n                }\r\n            }\r\n            chrome.tabs.update({url: link});\r\n            break;\r\n        }\r\n        case \"newForegroundTab\": {\r\n            chrome.tabs.create({url: text});\r\n            break;\r\n        }\r\n        case \"newBackgroundTab\": {\r\n            chrome.tabs.create({url: text, active: false});\r\n            break;\r\n        }\r\n    }\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/background.js\n");

/***/ })

})